Used MySQL and MySQL workbench for this assigment.
Exported database dump also included in submission.
Answers for each question is inclueded and was implemented in the test_library database.

Database Schema:

You will be working with a database that models a library. Here are the relevant tables:

books - Contains information about books in the library.

Columns: book_id (Primary Key), title, author, publication_year, isbn.

users - Contains information about library users.

Columns: user_id (Primary Key), first_name, last_name, email, registration_date.

borrowed_books - Records when a user borrows a book.

Columns: borrow_id (Primary Key), user_id (Foreign Key), book_id (Foreign Key), borrow_date, return_date.

Test Questions:

Write a SQL query to retrieve the top 10 most borrowed books, along with the number of times each book has been borrowed.
	SELECT b.book_id,b.title AS title,COUNT(*) AS count FROM borrowed_books bo JOIN books b ON bo.book_id = b.book_id GROUP BY b.book_id ORDER BY count DESC LIMIT 10;

Create a stored procedure that calculates the average number of days a book is borrowed before being returned. The procedure should take a book_id as input and return the average number of days.
	CREATE DEFINER=`root`@`localhost` PROCEDURE `averageBorrowedDays`(IN book_id_in INT, OUT average_days INT)
	BEGIN
		DECLARE totalBorrowedTime INT;
		DECLARE count INT;
		SELECT SUM(datediff(return_date,borrow_date)) INTO totalBorrowedTime from borrowed_books where book_id=book_id_in;
		SELECT COUNT(*) INTO count from borrowed_books where book_id=book_id_in;
		IF count > 0 THEN
			SET average_days = totalBorrowedTime/count;
		else
			SET average_days = 0;
		END IF;    
    
	END

Write a query to find the user who has borrowed the most books from the library.
	SELECT user_id, COUNT(*) as count from borrowed_books group by user_id order by count desc limit 1;

Create an index on the publication_year column of the books table to improve query performance.
	ALTER TABLE `test_library`.`books` ADD INDEX `idx_publish_year` (`publication_year` ASC) VISIBLE;

Write a SQL query to find all books published in the year 2020 that have not been borrowed by any user.
	SELECT b.title FROM test_library.books b left join borrowed_books bo on b.book_id=bo.book_id where publication_year=2020 and bo.book_id is null;

Design a SQL query that lists users who have borrowed books published by a specific author (e.g., "J.K. Rowling").
	SELECT bo.user_id FROM borrowed_books bo JOIN books b ON bo.book_id = b.book_id where b.author='';

Create a trigger that automatically updates the return_date in the borrowed_books table to the current date when a book is returned.

	DROP TRIGGER IF EXISTS `test_library`.`updateReturnDateOnBorrowedBook`;

	DELIMITER ;
	CREATE TRIGGER updateReturnDateOnBorrowedBook
	BEFORE UPDATE ON borrowed_books
	FOR EACH ROW
	BEGIN
		SET NEW.return_date = NOW();
	END;


Please remember to create and use any necessary tables, procedures, or triggers in the database to answer these questions